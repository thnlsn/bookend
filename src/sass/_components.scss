////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LOGO ////////////////////////////////////////////////////////////////////////////////////////////////////
// ### BLOCK: the logo on the top left of the page
.logo {
  height: 3.25rem;
  margin-left: 2rem;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SEARCH //////////////////////////////////////////////////////////////////////////////////////////////////
.search {
  flex: 0 0 40%;

  display: flex; // This is now a nested flexbox element (the whole header is a flex container)
  /*   align-items: center; */
  justify-content: center;

  // ### ELEMENT: the searchbar input
  &__input {
    font-family: inherit; // Remember, inputs do not inherit the global font declarations
    font-size: inherit; // Remember, inputs do not inherit the global font declarations
    color: inherit; // Remember, inputs do not inherit the global font declarations
    background-color: var(--color-grey-light-2);
    border: none;
    border-radius: 100px;
    padding: 0.7rem 2rem;
    margin-right: -3.5rem; // So that the button will be on top of the searchbar

    // Default styles to be animated
    transition: all 0.2s;
    width: 90%; // Initial state -- only 90% because we want to animate it widening when focused

    &:focus {
      outline: none;
      width: 100%;
      background-color: var(--color-grey-light-3);
    }

    &::placeholder {
      font-weight: 100;
      color: var(--color-grey-light-4);
    }
  }

  // ### ELEMENT: the magnifying glass icon inside the searchbar input
  &__button {
    border: none;
    background-color: transparent;

    transition: transform 0.1s;
    transform: translateY(1px);

    &:focus {
      outline: none;
    }

    &:active {
      transform: translateY(2px);
    }
  }

  // ### ELEMENT: the SVG icon (magnifying glass)
  &__icon {
    // To set the size of an svg icon, simply setting its height and width will suffice
    height: 2rem;
    width: 2rem;
    fill: var(--color-grey-dark-3);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// USER NAVIGATION /////////////////////////////////////////////////////////////////////////////////////////
// ### BLOCK: the container for each of the user navigation buttons (bookmarks, chat, user)
.user-nav {
  align-self: stretch; // Overwrites the align-items declaration in .header

  display: flex; // Nested flex container
  align-items: center;

  // All children of user-nav (so both icon-box and the user-box)
  & > * {
    height: 100%;
    padding: 0 2rem;
    cursor: pointer;

    display: flex; // Nested x2 flex container
    align-items: center;

    &:hover {
      background-color: var(--color-grey-light-2);
    }
  }

  // ### ELEMENT: the box containing the SVG icons
  &__icon-box {
    position: relative;
  }

  // ### ELEMENT: the SVG icons (the bookmark and chat icons)
  &__icon {
    // To set the size of an SVG icon, simply setting its height and width will suffice
    height: 2.25rem;
    width: 2.25rem;
    fill: var(
      --color-grey-dark-2
    ); // Fill is basically color for text, but for SVGs
  }

  // ### ELEMENT: the red bubble notifications
  &__notification {
    font-size: 0.8rem;
    height: 1.75rem;
    width: 1.75rem;
    border-radius: 50%; // Make the notification bubble an actual bubble (circle)
    background-color: var(--color-primary);
    color: var(--color-grey-light-1);

    position: absolute; // Position it on the top right of the icons
    top: 1.5rem;
    right: 1.15rem;

    display: flex; // Making the span containing the text a flex item to be centered
    align-items: center; // Center the notification numbers vertically (across cross axis)
    justify-content: center; // Center the notification numbers horizontally (across main axis)
  }

  // ### ELEMENT: the user information box (the profile photo and name)
  &__user-box {
    background-color: transparent;
  }

  // ### ELEMENT: the circle profile image
  &__user-photo {
    height: 3.75rem;
    border-radius: 50%;
    margin-right: 1rem;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SIDE NAVIGATION /////////////////////////////////////////////////////////////////////////////////////////
// ### BLOCK: the container for the sidebar links list as well as the legal text
.side-nav {
  font-size: 1.4rem;
  list-style: none; // Remove the bullet points that come with links
  margin-top: 3.5rem;

  @media only screen and (max-width: $bp-medium) {
    margin: 0;

    display: flex;
    // So the container of nav items can take up the entire width of the content when it becomes a top navbar
    flex: 1;
  }

  // ### The container for the link and icon
  &__item {
    position: relative; // For the absolute positioning of the ::before red hover animation
    cursor: pointer;

    @media only screen and (max-width: $bp-medium) {
      flex: 1;
    }

    // On a screen GREATER than 900px, apply a margin to each side-nav__item minus the last one
    @media only screen and (min-width: $bp-medium) {
      &:not(:last-child) {
        margin-bottom: 0.5rem;
      }
    }

    &::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      height: 100%; // So it is the same height as the list item
      background-color: var(--color-primary);

      // Initial animation state
      transition: transform 0.2s, width 0.45s cubic-bezier(1, -0.02, 0, 1);
      width: 3px;
      transform: scaleY(0);

      // ANIMATION FOR TABLET
      @media only screen and (max-width: $bp-medium) {
        width: 100%;

        transition: transform 0.2s, height 0.45s cubic-bezier(1, -0.02, 0, 1);
        height: 3px;
        transform: scaleX(0);
      }
    }

    // Ending animation state for a hovered nav item, but also for one that is --active, meaning it has been clicked and these styles will apply until another is clicked
    &:hover::before,
    &--active::before {
      // Ending animation state
      transform: scaleY(1);
      width: 100%;

      // ENDING ANIMATION STATE FOR TABLET
      @media only screen and (max-width: $bp-medium) {
        transform: scaleX(1);
        height: 100%;
      }
    }
  }

  // ### The actual link to click on, but also contains the SVG icon and the span that holds the text
  // Always target multiple pseudoclasses unless you want custom styles for different states of a link
  &__link:link,
  &__link:visited {
    color: var(--color-grey-light-1);
    text-decoration: none; // Remove the underline of default links
    text-transform: uppercase;
    display: block;
    padding: 1.5rem 3rem;

    display: flex;
    align-items: center; // To align the icon and the span for each link

    position: relative;
    z-index: 100;

    // The link, meaning the whole item but more specifically the link that takes up all the space (and holds the text and icon)
    @media only screen and (max-width: $bp-medium) {
      justify-content: center;
      padding: 2rem 0;
    }

    @media only screen and (max-width: $bp-small) {
      flex-direction: column;
      padding: 1.5rem;
    }
  }

  // ### The SVG icon
  &__icon {
    width: 1.75rem;
    height: 1.75rem;
    margin-right: 2rem;
    fill: currentColor; // Takes on the color of the parent element (kind of like inheriting values, but on a different property)
    @media only screen and (max-width: $bp-small) {
      margin-right: 0;
      margin-bottom: 0.7rem; // Since it is on top of the text now, jsut add a small buffer
      width: 1.5rem;
      height: 1.5rem;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// COPYRIGHT TEXT //////////////////////////////////////////////////////////////////////////////////////////
// ### BLOCK: the legal text at the bottom of the sidebar, is a flex child alongside .side-nav
.legal-text {
  font-size: 1.2rem;
  color: var(--color-grey-light-4);
  text-align: center;
  padding: 2.5rem;

  @media only screen and (max-width: $bp-medium) {
    display: none;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GALLERY /////////////////////////////////////////////////////////////////////////////////////////////////
.gallery {
  display: flex;
  &__photo {
    width: 100%;
    display: block; // Images should always be a block so it does not have small whitespace under it
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HOTEL OVERVIEW //////////////////////////////////////////////////////////////////////////////////////////
.overview {
  border-bottom: var(--line);

  display: flex;
  align-items: center;

  &__heading {
    font-size: 2.25rem;
    font-weight: 300;
    text-transform: uppercase;
    letter-spacing: 1px;
    padding: 1.5rem 3rem;

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      padding: 1.25rem 2rem; // padding around only the hotel name
    }
  }

  &__stars {
    margin-right: auto; // This is a good flexbox trick to essentially push an item all the way to another side
    // This is more to fix the styling of the SVG star icons, rather than actually needing them to be flex items
    display: flex; // The icons in the overview__stars are now flex items and will lose the inline styles that come wiht SVGs (such as line height similar to text and other inline elements)
  }

  &__icon-star,
  &__icon-location {
    width: 1.75rem;
    height: 1.75rem;
    fill: var(--color-primary);
    &--grey {
      width: 1.75rem;
      height: 1.75rem;
      fill: var(--color-grey-dark-2);
    }
  }

  &__location {
    font-size: 1.2rem;
    display: flex;
    align-items: center;
  }

  &__icon-location {
    margin-right: 0.5rem; // To push the location pin icon slightly away from the inline location button
  }

  &__rating {
    background-color: var(--color-primary);
    color: #fff;
    margin-left: 3rem;
    padding: 0 2.25rem;

    align-self: stretch; // To stretch the red box with the average rating and vote count
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;

    @media only screen and (max-width: $bp-small) {
      padding: 0rem 1.5rem; // padding left/right of the rating
    }
  }

  &__rating-average {
    font-size: 2.25rem;
    font-weight: 300; // Skinny font weight

    @media only screen and (max-width: $bp-small) {
      font-size: 1.8rem;
      margin-bottom: 0.5rem;
    }
  }

  &__rating-count {
    font-size: 0.8rem;
    text-transform: uppercase;
    margin-top: -5px; // Just to move the average score and total votes elements closer slightly

    @media only screen and (max-width: $bp-small) {
      font-size: 0.5rem;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BUTTON INLINE ///////////////////////////////////////////////////////////////////////////////////////////
.btn-inline {
  border: none;
  color: var(--color-primary);
  font-size: inherit; // Since it is an inline button, inheriting the font-size makes sense, as you'd want it to be the same as the text in line. Also makes it more modular and reusable
  border-bottom: 1px solid currentColor; // This will simply take the same color as the text (so the value in color: above) and will do the same if the color changes in different states
  padding-bottom: 2px;
  display: inline-block;
  background-color: transparent; // This is because we want to use this inline, so it shouldnt have a fixed color, so it can be used anywhere (modular & reusable)
  cursor: pointer;

  transition: all 0.1s;

  // For a span that is inside this block
  & span {
    transition: margin-left 0.4s; // Targetting margin-left because otherwise the other animation would lag on the span
    margin-left: 3px;
  }

  &:hover {
    color: var(
      --color-grey-dark-1
    ); // The border will change color as well since we used currentColor

    // The span on hover
    span {
      margin-left: 8px;
    }
  }

  &:focus {
    outline: none; // Get rid of the outline when focused (which is a browser default)
  }

  &:active {
    transform: scale(0.98); // Shrink a tiny amount when clicked
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PARGRAPH ////////////////////////////////////////////////////////////////////////////////////////////////

// last-of-type targets the last child of the same type (in this case <p/> elements)
// last-child would not have worked because there are more children after the paragraph classes
.paragraph:not(:last-of-type) {
  margin-bottom: 2rem;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LIST ////////////////////////////////////////////////////////////////////////////////////////////////////

.list {
  list-style: none;
  margin: 3rem 0;
  padding: 3rem 0;

  border-top: var(--line);
  border-bottom: var(--line);

  display: flex;
  flex-wrap: wrap; // Allows elements to wrap, but it will be inconsistant without width or basis

  &__item {
    flex: 0 0 50%; // So that each item takes 50% of the width, effectively making it 2 colums of items, since only 2 will be able to fit per row
    margin-bottom: 1rem;

    &::before {
      content: '';
      display: inline-block;
      height: 1rem;
      width: 1rem;
      margin-right: 0.7rem;

      // Older browsers
      //background-image: url('../images/chevron-thin-right.svg');
      //background-size: cover;

      // Newer browsers - masks
      // Mask: defines an area where we can look through an element and see whats behind it
      background-color: var(--color-primary);
      mask-image: url('../images/chevron-thin-right.svg');
      mask-size: cover;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RECOMMEND ///////////////////////////////////////////////////////////////////////////////////////////////

.recommend {
  font-size: 1.3rem;
  color: var(--color-grey-dark-3);

  display: flex;
  align-items: center;

  &__count {
    margin-right: auto; // Very useful tool to position elements in a flexbox
  }

  &__friends {
    display: flex; // Simple fix to the friend circles wrapping at smaller viewport, because flex-wrap by default is nowrap
    background-color: transparent;
  }

  &__photo {
    box-sizing: content-box;
    height: 4rem;
    width: 4rem;
    border-radius: 50%;
    border: 0.3rem solid #fff;

    &:not(:last-child) {
      margin-right: -2rem;
    }
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// REVIEW //////////////////////////////////////////////////////////////////////////////////////////////////
.review {
  background-color: #fff;
  box-shadow: var(--shadow-light);
  padding: 3rem;
  margin-bottom: 3.5rem;

  position: relative;
  overflow: hidden;

  @media only screen and (max-width: $bp-medium) {
    padding: 2rem;
    margin-bottom: 3rem; // Should be same as detail padding to be more uniform
  }

  // Under 600px, make the width of reviews slighlty less than 100% so they don't take up all the space and look strangely long
  @media only screen and (max-width: $bp-small) {
    width: 80%;
  }

  /*   display: flex;
  flex-direction: column; */

  &__text {
    margin-bottom: 2rem;
    z-index: 100;
    position: relative; // Neccesary for z-index to work
  }
  &__user {
    display: flex;
    align-items: center;
  }
  &__photo {
    height: 4.5rem;
    width: 4.5rem;
    border-radius: 50%;
  }
  &__user-box {
    margin: 0 auto 0 1.5rem;

    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  &__user-name {
    font-size: 1.1rem;
    font-weight: 600;
    text-transform: uppercase;
    margin-bottom: 0.4rem;
  }
  &__user-date {
    font-size: 1rem;
    color: var(--color-grey-dark-3);
  }
  &__rating {
    font-size: 2rem;
    color: var(--color-primary);
    /* FONT WEIGHT? */
  }

  &::before {
    content: '\201c';
    position: absolute;
    top: -2.75rem;
    left: -1rem;
    line-height: 1;
    font-size: 20rem;
    color: var(--color-grey-light-2);
    font-family: sans-serif;
    z-index: 10; // Must be less than the text so it won't appear over it
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CALL TO ACTION //////////////////////////////////////////////////////////////////////////////////////////
// The entire cta container
.cta {
  padding: 3.5rem 0;
  text-align: center;

  @media only screen and (max-width: $bp-medium) {
    padding: 2.5rem 0;
  }

  &__book-now {
    font-size: 2rem;
    font-weight: 300;
    text-transform: uppercase;
    margin-bottom: 2.5rem;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BUTTON //////////////////////////////////////////////////////////////////////////////////////////////////
.btn {
  font-size: 1.5rem;
  font-weight: 300;
  text-transform: uppercase;
  border-radius: 100px;
  border: none;
  cursor: pointer;

  @include gradient-animation(
    215deg,
    var(--color-primary-light),
    var(--color-primary-dark),
    0.8s
  );

  color: #fff;
  overflow: hidden; // To hide the invisible span element

  position: relative;

  transition: transform 0.1s;

  // These should happen to both the visible and invisible span elements
  & > * {
    display: inline-block;
    height: 100%; // 100% on height and width will help center the words
    width: 100%;
    transition: all 0.3s;
  }

  &__visible {
    padding: 2rem 7.5rem;
  }

  &__invisible {
    padding: 2rem 0; // Having the same padding can cause the words to squish, but we want it centered in one line

    position: absolute;
    left: 0;
    top: -100%; // Right above the visible button span
  }

  &:hover &__visible {
    transform: translateY(100%);
  }

  &:hover &__invisible {
    top: 0;
  }

  &:focus {
    outline: none;
  }

  &:active {
    transform: scale(0.98);
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ANIMATIONS //////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
@keyframes pulsate {
  0% {
    transform: scale(1);
    box-shadow: none;
  }

  50% {
    transform: scale(1.05);
    box-shadow: 0 1rem 4rem rgba(0, 0, 0, 0.25);
  }

  100% {
    transform: scale(1);
    box-shadow: none;
  }
}

@keyframes phase {
  0% {
    opacity: 1;
  }

  50% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}
